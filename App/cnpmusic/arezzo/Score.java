// This file is part of Arezzo.

// Arezzo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Arezzo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

// Copyright (C) Pierre Jouvelot, 1997-2014, MINES ParisTech

// Contributors : Jerome Segard (2000)

package cnpmusic.arezzo ;

import cnpmusic.arezzo.* ;
import java.awt.* ;
import java.awt.Image ;
import java.applet.* ;
import java.net.* ;

// Les positions de draw sont en bas et a gauche de l'objet.
//
public class Score 
  extends Canvas 
  implements Constants
{
  String name ;
  Sequence sequence ;

  Chord selected_chord ;
  Degre selected_degre ;
  Note selected_note ;
  Chiffrage selected_chiffrage ;
  int selected_chiffre = 0 ;

  int insert_mode = 0 ;
  float scroll_ratio ;

  static Options display_options ;

  // Insert modes:  0-4 for voices

  static int insert_chord_bass = 10 ;
  static int insert_chord_full = 11 ;
  static int insert_lowest = 12 ;

  // Display parameters

  static int y_offset_bemol = 0 ;
  static int y_offset_dieze = 8 ;
  static int y_offset_x = 23;
  static int y_offset_mesure = 5 ;
  static int x_offset_alterations = 9 ;
  static int y_offset_alterations = 20 ;
  
  static int inter_ligne = 10 ;
  static int inter_chord = 40 ;
  static final int inter_chiffres = 20 ;
  static final int inter_barre = 2 ;
  static final int inter_mesure = 20 ;

  static int portee_x = 45 ;
  static int portee_y = 250 ;	
  static final int diff_y_bas_y_haut = 100 ;
  static final int nombre_lignes = 5 ;
  static final int cle_de_sol_y = 90 ;
  static final int cle_de_fa_y = 207 ;
  static final int cles_x = 10 ;
  static final int chiffrage_y = 30 ;
  static final int chiffrage_jazz_y = 80 ;
  static final int degre_y = 170 ;
  static final int hauteur_degre_y = 30 ;
  static final int top_chiffrage_y = portee_y + chiffrage_y ;
    
  static {
    display_options = 
      new Options( new String[] {"Score.ShowDegre",
				 "Score.ShowChiffrage",
				 "Score.ShowBarNumber",
				 "Score.ShowComments",
				 "Score.ShowClassic",
				 "Score.ShowJazz",
				 "Score.ShowAllJazzInversions"},
		   Options.option_true ) ;
  }

  public Score( String n , Sequence s ) {
    name = n ;
    sequence = s ;
  }

  public void update(Graphics g) {
    paint(g) ;
  }

  //

  String abc() {
    String s = "" ;

    s = "X:1\n" ;
    s += "T:"+name+"\n" ;
    s += "C:"+Harmony.me.user.getName()+"\n" ;
    s += "M:"+sequence.mesure.count+"/"+sequence.mesure.beat+"\n" ;
    s += "L:1/1\n" ;
    s += "N:Generated by "+Harmony.me.applet.getAppletInfo()+"\n" ;
    s += "%%staves {3 2 1 0}\n" ;
    s += 
      "K:"+
      Note.letters[ sequence.tonality.position ].toUpperCase()+
      sequence.tonality.alteration.nom()+
      ((sequence.tonality.mode == Tonality.mode_majeur) ? 
       " major" : " minor")+
      "\n" ;
    s += sequence.abc() ;
    
    return s ;
  }

  //
  
  static Image cle_de_sol, cle_de_fa ;
  static Image bemol, bemol_g, bemol_r ;
  static Image dieze, dieze_g, dieze_r ;
  static Image becarre, becarre_g, becarre_r ;
  private MediaTracker media_tracker = null ;

  public void paint( Graphics g ) {
    if( media_tracker == null ) {
      Applet app = Harmony.me.applet ;
      URL base = app.getCodeBase() ;

      try {
	cle_de_sol = 
	  app.getImage( new URL( base+"/"+images_directory+"/sol_t.gif" )) ;
	cle_de_fa = 
	  app.getImage( new URL( base+"/"+images_directory+"/fa_t.gif" )) ;
	dieze = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/dieze_t.gif" )) ;
	dieze_g = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/dieze_t_g.gif" )) ;
	dieze_r = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/dieze_t_r.gif" )) ;
	bemol = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/bemol_t.gif" )) ;
	bemol_g = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/bemol_t_g.gif" )) ;
	bemol_r = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/bemol_t_r.gif" )) ;
	becarre = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/becarre_t.gif" )) ;
	becarre_g = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/becarre_t_g.gif" )) ;
	becarre_r = 
	  app.getImage( new URL( base+"/"+
				 images_directory+"/becarre_t_r.gif" )) ;
      }
      catch( Exception e ) {
	  Harmony.fail( "Unable to get images s.a. "+
			base+"/"+images_directory+"/becarre_t_r.gif" ) ;
      }
      media_tracker = new MediaTracker( this ) ;
      Image[] images = new Image [] {
	cle_de_sol, cle_de_fa, 
	dieze, dieze_g, dieze_r,
	bemol, bemol_g, bemol_r,
	becarre, becarre_g, becarre_r
      } ;
      for( int i = 0 ; i<images.length ; i++ ) {
	media_tracker.addImage( images[i], 0 ) ;
      }
      try {
	media_tracker.waitForAll() ;
      }
      catch( InterruptedException e ) {
	  Harmony.fail( "Unable to track images s.a. "+
			base+"/"+images_directory+"/becarre_t_r.gif" ) ;
      }
    }
    int y = portee_y ;
    int longueur = 
      sequence.tonality.width()+
      sequence.mesure.width()+
      (sequence.size()-initialChordNumber())*inter_chord
      -inter_chord/2;

    g.setColor(Color.black) ;
    g.drawImage( cle_de_sol, 0, cle_de_sol_y, null ) ;
    g.drawImage( cle_de_fa, 0, cle_de_fa_y, null ) ;

    for( int i = 0 ; i<nombre_lignes ; i++, y-=inter_ligne ) {
      g.drawLine(cles_x, y, portee_x+longueur, y) ;
    }
    y = portee_y - diff_y_bas_y_haut ;

    for( int i = 0 ; i<nombre_lignes ; i++, y-=inter_ligne ) {
      g.drawLine( cles_x, y, portee_x+longueur, y ) ;
    }
    sequence.draw( g, initialChordNumber(), portee_x, portee_y ) ;
  }

  public boolean isSelected( int x, int y ) {
    int y_max = portee_y+chiffrage_y+inter_chiffres*Chiffrage.max_chiffres ;
    int y_min = portee_y-degre_y-hauteur_degre_y ;
    int x_min = portee_x+sequence.tonality.width() ;
    int x_max = portee_x+sequence.width() ;

    return (y < y_max  && y >= y_min && x < x_max && x >= x_min ) ;
  }
    
  public Chord selectedChord( int x, int y ) {
    int i =
      sequence.selectedChordNumber( x, y, initialChordNumber()) ;

    return selected_chord = (Chord)sequence.elementAt( i ) ;
  }
           
  public Note selectedNote( int x, int y ) {
    Chord a = selectedChord( x, y ) ;
    
    if( a != null ) {
      return selected_note = a.selectedNote( y ) ;
    }
    else {
      return null ;
    }
  }
    
  public Chiffrage selectedChiffrage( int x, int y ) {
    Chord a = selectedChord( x, y ) ;

    if( y >= top_chiffrage_y ) {
      selected_chiffrage = a.chiffrage ;
      selected_chiffre = selected_chiffrage.selectedChiffre( y ) ;
      return selected_chiffrage ;
    }
    else {
      return null ;
    }
  }

  public Degre selectedDegre( int x, int y ) {
    Chord a = selectedChord( x, y ) ;

    if( y <= portee_y-degre_y ) {
      return selected_degre = a.degre ;
    }
    else {
      return null ;
    }
  }
    
  //

  private int initialChordNumber() {
    int max = (int)(Math.floor( scroll_ratio*sequence.size())) ;
    return Math.min( sequence.size()-1, max ) ; 
  }
}
